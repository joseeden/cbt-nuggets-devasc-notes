
#******************************************************************************************************************#

# 7-XML_JSON_YAML

#******************************************************************************************************************#

# 2021-01-07 00:40:36

Why use Plain-text data formats?

    - Human-readable
    - COmputer-readable

Plain-text data formats combines these two. Both humans and the computer should be able to read and
figure out how to use the data. Sample of plain-text data formats commonly used today:

    - XML
    - YAML 
    - JSON

Main benefits:

    - Structured for computers  - follows certain rules so the computer can interpret the data
    - Annotated for humans      - humans are able to understand it as well
    - Open and extensible       - no licensing associated, specs are public domain
    - Self-describing           - similar with being annotated for humans 
    - Platform-agnostic         - every computer system can support plain-text.

#-----------------------------------------------------------------------------------------------------------   

XML - EXTENSIBLE MARKUP LANGUAGE

Describes data usign tags. 
Looks similar with HTML.
Also the data format for SOAP - this is a web-based API protocol that relies on XML to transfer data.

Downside:   Too verbose - lot of data, meaning lots of BW to use when transferring data.


JSON - JAVASCRIPT OBJECT NOTATION

Just like how you write objects in a javascript code.
Popular, widely-supported. 
Also lightweight - less BW in transferring less characters.  
ALso native to javascript.
Whitespace and middle lines don't mean anything
More ideal in compressing data.


YAML - YAML AIN'T MARKUP LANGUAGE

Lighter-weight than JSON
Highly-legible
Fairly compact and succint - less characters as well in terms of no brackets
Whitespace and middle lines ARE important.
Ideal for configuration

#-----------------------------------------------------------------------------------------------------------   

XML SYNTAX

A well-formed XML file includes

    1. Prolog
    2. Root tag 
    3. Every tga s opened and closed
    4. Attributes have values inside double quotes/single quotes

Sample XML:

<?xml version="1.0" encoding="UTF-8"?>                      # Prolog - recommended

<People>                                                    # This is the ROOT TAG - Mandatory
    <Person Id="1">
        <FirstName>John</FirstName>
        <LastName>Smith</LastName>
        <Email>john.smith@yahoo.com</Email>
    </Person>

    <Person Id="2">                                         # Tags can have attribute, like 'Id'   
        <FirstName>Jane</FirstName>
        <LastName>Doe</LastName>
        <Email>jane.doe@yahoo.com</Email>
    </Person>

    <Person Id="3">                                         # Tags can be nested
        <FirstName>Jeff</FirstName>
        <LastName>Park</LastName>
        <Email>jeff.park@yahoo.com</Email>
    </Person>

</People>

#-----------------------------------------------------------------------------------------------------------   

XML ELEMENTS, TAGS, AND ATTRIBUTES 


XML ELEMENTS

'Bones' of the XML file. An element is defined by an opening tag and a closing tag.
As an example:

    <Person Id="3">                                         ----------------------
        <FirstName>Jeff</FirstName>
        <LastName>Park</LastName>                           This is one element
        <Email>jeff.park@yahoo.com</Email>
    </Person>                                               ----------------------

It can include sub-tags as well.

        <FirstName>Jeff</FirstName>                         This is an element 

Also, for nested tags, always closed the inner tags first.

    <tag1> <tag2> <tag3> ............ </tag3> </tag2> </tag1>


You can also have empty ELEMENTS.
The example below is opening and clsoing itself.

    <EmptyElement/>                                         

It can also contain Attributes

    <EmptyElement id="123" />                                         



XML ATTRIBUTES

Included inside the actual tag. Its format is 

    <tag1 attr="any value">.......... </tag1>

You can also use escape characters

    <tag1 attr="can have &quot; or &apos; ">.......... </tag1>

Where:

    &quot;      - same as a double quote 
    &apos;      - same as a single quote

#-----------------------------------------------------------------------------------------------------------   

XML DOM - DOCUMENT OBJECT MODEL

# EDEN: THe video was concise although I may need to check other resources online about XML DOM.
# Also installed XML Tools (Josh Johnson) extension in VSCode.

XML DOM - Basically, when the xml file becomes large and hard to read, you ccan check out the tree view
in vscode and see the elements in a tree-structure, which makes it easier to understand the file.

#-----------------------------------------------------------------------------------------------------------   
#-----------------------------------------------------------------------------------------------------------   
#-----------------------------------------------------------------------------------------------------------   

JSON SYNTAX

Basically a javascript code - since javascript is programming language interpreted by all modern web browser,
JSON has been somehow a widely adapted data serialization method.

The very pattern of JSON syntax is the key-value pair.

    "key": "value"          - this is a key-value pair
    { javascript object }   - javascript objects are enclosed with {}
    [ Array ]               - Arrays are enclosed with []

Note also that JS objects within an array are numbered 0,1,2...
Another thing:  Whitespace and new lines are not important.

All keys should be enclosed by double quotes.
Not all values are enclosed by double quotes.

Sample JSON:

[                                                                           ---------------------------------
    {                                           ---------------------------
        "Id": "1",
        "FirstName": "John",                    This is a javascript 
        "LastName": "Smith",                    object
        "Email": "john.smith@yahoo.com",
    },                                          ---------------------------     This is an Array.                       
    {                                                                           Arrays contains objects
        "Id": "2",                                                                  
        "FirstName": "Jane",
        "LastName": "Doe",
        "Email": "jane.doe@yahoo.com",
    },
    {                                           ---------------------------
        "Id": "3",
        "FirstName": "Jeff",                    JS objects contains the 
        "LastName": "Park",                     key-value pairs
        "Email": "jeff.park@yahoo.com",
    },                                          ---------------------------
    
]                                                                           ---------------------------------


#-----------------------------------------------------------------------------------------------------------   

JSON STRINGS, NUMBERS, AND BOOLEANS

# EDEN: Found out that JSON doesnt really support comments. 

Here, we differentiate numbers, strings, and BOOLEANS

    "strings"           - always have to be enclosed in quotes 
    123                 - numbers are not enclsoed in quotes
    true or false       - all lower-case. 'True' and 'False' not valid.


Using the same example above:

{"People":
    [                                            
        {                                           
            "Id": 1,
            "FirstName": "John",                    
            "LastName": "Smith",                    
            "Email": "john.smith@yahoo.com",
            "Active": true
        },                                          
        {                                           
            "Id": 2,                                                                  
            "FirstName": "Jane",
            "LastName": "Doe",
            "Email": "jane.doe@yahoo.com",
            "Active": false
        },
        {                                           
            "Id": 3,
            "FirstName": "Jeff",                    
            "LastName": "Park",                     
            "Email": "jeff.park@yahoo.com",
            "Active": true        
        },                                          
        
    ]  
}

#-----------------------------------------------------------------------------------------------------------   

JSON OBJECTS AND ARRAYS 

Here we're differentiating an object from array.

    { object }      - enclosed with {}
    [ array ]       - enclosed with []

In an object:

    - key-value pairs are separated by comma
    - must always have a key and a value, separated by a colon.

In an array:

    - objects must be separated by comma
    - elements dont need a key, the key is actually a numeric index built-in
    - objects are numbered 0,1,2... with 0 being the index of the first object.

There can also be nesting done.

Sample of object nested within an object:

        {                                           
            "Id": 3,
            "Name": { "First": "John", "Last": "Smith"}                  
            "Email": "jeff.park@yahoo.com",
            "Active": true        
        },          

Sample of array nested within an object:

        {                                           
            "Id": 3,
            "Name": ["John", "Smith"]
            "Active": true        
        },          


#-----------------------------------------------------------------------------------------------------------   
#-----------------------------------------------------------------------------------------------------------   
#-----------------------------------------------------------------------------------------------------------   

YAML SYNTAX

YAML - YAML Ain't Markup Language
Main goal is to b human-readable.
Relies new lines and indentations 
YAML can also differentiate integers from floating points.
It also uses booleans 

'---' indicates the start of the YAML file 
Note that there's also the '...' at the bottom of the YAML file - this is optional
'...' indicates the end of the YAML file

You can also put 2 YAML documents into single one, by using the '---' and '...'
just like the example below.


Sample yaml:

---
people:
- id: 1
  Code: 2.5  
  FirstName: John
  LastName: Smith
  Email: john.smith@yahoo.com
  Active: true
- id: 2
  Code: 4.6 
  FirstName: Jane 
  LastName: Doe 
  Email: jane.doe@yahoo.com
  Active: false 
- id: 3
  Code: 56.5
  FirstName: Jeff 
  LastName: Park 
  Email: jeff.park@yahoo.com
  Active: true
...
--- # this is the start of a new document in YAML
item1: item1value
item2: item2value


Note that the number of indentations are arbitrary, as the attributes of an object are aligned
The example below is still considered valid, although not a good practice

people:
- id: 1
  Code: 2.5  
  FirstName: John
  LastName: Smith
  Email: john.smith@yahoo.com
  Active: true
-   id: 2
    Code: 4.6 
    FirstName: Jane 
    LastName: Doe 
    Email: jane.doe@yahoo.com
    Active: false 
-  id: 3
   Code: 56.5
   FirstName: Jeff 
   LastName: Park 
   Email: jeff.park@yahoo.com
   Active: true

The '-' identifies a collection or a group - this is basically the same as object.
YAML calls them MAPPING

- id: 1
  Code: 2.5  
  FirstName: John
  LastName: Smith
  Email: john.smith@yahoo.com
  Active: true

#-----------------------------------------------------------------------------------------------------------   

YAML STRINGS, NUMBERS, FLOAT, AND BOOLEANS 

Using the sample below:

---
Anumber: 123
AFloat: 12.3
Astring: Hello World!
AQuotedString: "Hello WOrld!\n" 
AMultilineString: This is valid as long as the lines 
                  are on same indentation
ABoolean: true


Here we have IMPLICIT DATATYPES

    123                 - as long as numeric and not enclosed in "", it is treated as an integer
    12.3                - if the number has a decimal point, then it is treated as a float
    Hello World!        - valid string, but cannot contain escape charactes such as new line (\n)
    "Hello WOrld!\n"    - valids string. YAML can read escape characters inside quotes

#******************************************************************************************************************#
